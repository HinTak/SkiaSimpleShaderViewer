uniform float iTime;
uniform float2 iResolution;
uniform float4 iMouse;

// Purple Newtons Fractal 
// Created by zmayhew in 2022-05-02
// https://www.shadertoy.com/view/ftfBWf

const vec2 ROOT_0 = vec2(0.5, 0.0);
const vec2 ROOT_1 = vec2(0.0, 0.5);
const vec2 ROOT_2 = vec2(1.0, 0.5);

const int ITERATIONS = 100;

const float SCALE = 1.5;

const vec3 COL_0 = vec3(0.39, 0.66, 0.97);
const vec3 COL_1 = vec3(0.53, 0.45, 0.97);
const vec3 COL_2 = vec3(0.40, 0.40, 0.90);

struct roots_t {
    vec2 r0;
    vec2 r1;
    vec2 r2;
};

vec2 product(in vec2 a, in vec2 b) {
    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);
}

vec2 divide(in vec2 a, in vec2 b) {
    return vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)));
}

vec2 f(in roots_t roots, in vec2 z) {
    return product(product(z - roots.r0, z - roots.r1), z - roots.r2);
}

vec2 f_prime(in roots_t roots, in vec2 z) {
    vec2 z2 = 3.0 * product(z, z);
    vec2 z1 = -2.0 * product(z, roots.r0 + roots.r1 + roots.r2);
    vec2 z0 = product(roots.r0, roots.r1 + roots.r2)
            + product(roots.r1, roots.r2);
    return z2 + z1 + z0;
}

vec2 newton_iteration(in roots_t roots, in vec2 z_n) {
    return z_n - divide(f(roots, z_n), f_prime(roots, z_n));
}

vec2 newton_loop(in roots_t roots, in vec2 initial_z) {
    vec2 z = initial_z;
    for (int i = 0; i < ITERATIONS - 1; ++i) {
        z = newton_iteration(roots, z);
    }
    return z;
}


vec4 main( in vec2 fragCoord ) {
    vec2 uv = (((fragCoord/iResolution.y) * 2.0) - vec2(1.0, 1.0))/SCALE;
    vec2 mouse = (((iMouse.xy/iResolution.y) * 2.0) - vec2(1.0, 1.0))/SCALE;

    
    roots_t roots = roots_t(
        mouse,
        ROOT_1,
        ROOT_2
    );

    
    if (distance(uv, roots.r0) < 0.05
     || distance(uv, roots.r1) < 0.05
     || distance(uv, roots.r2) < 0.05
       ) {
        return( vec4(1.0));
    }
    
    vec2 z = newton_loop(roots, uv);
    
    float d_0 = distance(z, roots.r0);
    float d_1 = distance(z, roots.r1);
    float d_2 = distance(z, roots.r2);
    
    vec3 col = COL_2;
    
    if (d_0 < d_1 && d_0 < d_2) {
        col = COL_0;
    } else if (d_1 < d_2 && d_1 < d_0) {
        col = COL_1;
    }
    

    return (vec4(col, 1.0));
}